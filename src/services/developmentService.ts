import { getVireyaDashboards } from "./vireyaDashboardService";
import { getLearningResultsByUser } from "./learningResultService";
import { callGeminiForDashboard } from "./geminiDashboardService";
import { getAllSubjects } from "./subjectService";
import { getAllScoreTypes } from "./scoreTypeService";

// üëâ Prompt ri√™ng ƒë∆∞·ª£c t√°ch ra
const developmentPrompt = (
  normalizedResults: { subjectName: string; score: number; type: string }[],
  dashboards: any[]
): string => {
  return `
üî∏ K·∫øt qu·∫£ h·ªçc t·∫≠p:
${normalizedResults.map(r => `- ${r.subjectName}: ${r.score} (${r.type})`).join("\n")}

üîπ C√°c k·∫ø ho·∫°ch h·ªçc t·∫≠p hi·ªán t·∫°i:
${dashboards.map((d: any) => `- ${d.title ?? "(Kh√¥ng c√≥ ti√™u ƒë·ªÅ)"}`).join("\n")}

D·ª±a tr√™n d·ªØ li·ªáu tr√™n, h√£y ƒë·ªÅ xu·∫•t ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn cho t·ª´ng m√¥n, bao g·ªìm:
- Tr√¨nh ƒë·ªô hi·ªán t·∫°i (S∆° c·∫•p, Trung c·∫•p, N√¢ng cao)
- M·ª•c ti√™u ph√°t tri·ªÉn ch√≠nh
- 3-4 chi·∫øn l∆∞·ª£c h·ªçc t·∫≠p th·ª±c t·∫ø

Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON:
[
  {
    "subject": "To√°n",
    "level": "Trung c·∫•p",
    "goal": "TƒÉng c∆∞·ªùng t∆∞ duy logic n√¢ng cao",
    "strategies": [
      "√în t·∫≠p chuy√™n ƒë·ªÅ h√†m s·ªë",
      "Tham gia CLB to√°n h·ªçc",
      "L√†m b√†i thi th·ª≠ m·ªói tu·∫ßn"
    ]
  }
]

KH√îNG th√™m b·∫•t k·ª≥ gi·∫£i th√≠ch hay m√¥ t·∫£ n√†o kh√°c ngo√†i JSON.
`;
};

export async function getDevelopmentSuggestions() {
  const userId = "user_fake_id_123456"; // ‚úÖ D√πng ID gi·∫£ c·ªë ƒë·ªãnh

  // L·∫•y d·ªØ li·ªáu k·∫øt qu·∫£ h·ªçc t·∫≠p v√† k·∫ø ho·∫°ch h·ªçc t·∫≠p
  const [results, dashboards] = await Promise.all([
    getLearningResultsByUser(userId),
    getVireyaDashboards(userId),
  ]);

  const subjects = await getAllSubjects();
  const scoreTypes = await getAllScoreTypes();

  const normalizedResults = results.map(r => {
    const subject = subjects.find(s => s.id === r.subjectId);
    const scoreType = scoreTypes.find(t => t.id === r.scoreTypeId);
    return {
      subjectName: subject?.name ?? "Unknown",
      score: r.score,
      type: scoreType?.name ?? "Unknown",
    };
  });

  // T·∫°o prompt
  const prompt = developmentPrompt(normalizedResults, dashboards);

  // G·ªçi Gemini
  const raw = await callGeminiForDashboard(prompt);

  // Parse JSON t·ª´ Gemini
  try {
    const jsonStart = raw.indexOf("[");
    const jsonEnd = raw.lastIndexOf("]");
    const cleaned = raw.slice(jsonStart, jsonEnd + 1);
    return JSON.parse(cleaned);
  } catch (e) {
    console.error("L·ªói parse JSON t·ª´ Gemini:\n", raw);
    throw new Error("Gemini tr·∫£ v·ªÅ kh√¥ng ph·∫£i JSON h·ª£p l·ªá.");
  }
}
