const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

const API_KEY = "AIzaSyCkCmNGA5DcO_OJ66e4oswZgszlcpBazXE"; // üîë ƒê·∫£m b·∫£o key n√†y kh√¥ng b·ªã l·ªô public

/**
 * G·ªçi Gemini v·ªõi prompt b·∫•t k·ª≥
 */
export const callGeminiForDashboard = async (prompt: string): Promise<string> => {
  try {
    const res = await fetch(`${GEMINI_API_URL}?key=${API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [{ text: prompt }],
          },
        ],
      }),
    });

    const data = await res.json();

    if (!res.ok) {
      console.error("Gemini API error:", data);
      throw new Error(data.error?.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ Gemini");
    }

    return data.candidates?.[0]?.content?.parts?.[0]?.text || "(Kh√¥ng c√≥ ph·∫£n h·ªìi)";
  } catch (error) {
    console.error("Gemini API exception:", error);
    throw error;
  }
};

/**
 * ‚úÖ Prompt ph√¢n t√≠ch nƒÉng l·ª±c h·ªçc t·∫≠p (Radar + Line + AI summary)
 */
const geminiLearningAnalysisPrompt = `
ƒê√¢y l√† d·ªØ li·ªáu ƒëi·ªÉm c·ªßa h·ªçc sinh theo t·ª´ng m√¥n qua 3 h·ªçc k·ª≥:
- To√°n: 8, 9, 7
- VƒÉn: 6, 6, 7
- Anh: 9, 9, 10

H√£y ph√¢n t√≠ch theo m·∫´u JSON d∆∞·ªõi ƒë√¢y v√† ch·ªâ TR·∫¢ V·ªÄ JSON THU·∫¶N T√öY (KH√îNG gi·∫£i th√≠ch, KH√îNG markdown, KH√îNG comment):

{
  "subjectInsights": [
    {
      "subjectName": "To√°n",
      "trend": "Dao ƒë·ªông",
      "strength": "Hi·ªÉu nhanh c√¥ng th·ª©c",
      "weakness": "Thi·∫øu ·ªïn ƒë·ªãnh ƒë·∫ßu k·ª≥",
      "suggestion": "C·∫ßn luy·ªán ƒë·ªÅ gi·ªØ phong ƒë·ªô"
    }
  ],
  "radarChartData": [
    { "subject": "To√°n", "score": 8.0 },
    { "subject": "VƒÉn", "score": 6.3 },
    { "subject": "Anh", "score": 9.3 }
  ],
  "trendChartData": [
    { "name": "HK1", "To√°n": 8, "VƒÉn": 6, "Anh": 9 },
    { "name": "HK2", "To√°n": 9, "VƒÉn": 6, "Anh": 9 },
    { "name": "HK3", "To√°n": 7, "VƒÉn": 7, "Anh": 10 }
  ],
  "overallSummary": "H·ªçc sinh c√≥ k·∫øt qu·∫£ t·ªët ·ªü m√¥n Anh v√† To√°n. M√¥n VƒÉn c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán th√™m."
}
`;

/**
 * üîú Prompt placeholder cho m·ª•c kh√°c (b·∫°n s·ª≠a n·ªôi dung theo nhu c·∫ßu)
 */
const geminiOtherPrompt = `
# TODO: Prompt cho m·ª•c kh√°c (v√≠ d·ª•: ƒë·ªãnh h∆∞·ªõng ph√°t tri·ªÉn, g·ª£i √Ω ng√†nh ngh·ªÅ,...)

B·∫°n h√£y ph√¢n t√≠ch XYZ...
--> Tr·∫£ v·ªÅ JSON theo m·∫´u ...
(CH·ªà JSON, KH√îNG markdown, KH√îNG l·ªùi gi·∫£i th√≠ch)
`;

/**
 * H√†m g·ªçi Gemini ƒë·ªÉ ph√¢n t√≠ch nƒÉng l·ª±c h·ªçc t·∫≠p
 */
export const getGeminiAnalysis = async () => {
  const responseText = await callGeminiForDashboard(geminiLearningAnalysisPrompt);

  const cleanedText = responseText
    .replace(/```json|```/g, "") // lo·∫°i b·ªè markdown n·∫øu c√≥
    .trim();

  try {
    const parsed = JSON.parse(cleanedText);
    return parsed;
  } catch (e) {
    console.error("‚ùå Kh√¥ng th·ªÉ parse JSON t·ª´ Gemini:\n", cleanedText);
    throw new Error("K·∫øt qu·∫£ t·ª´ Gemini kh√¥ng ph·∫£i JSON h·ª£p l·ªá");
  }
};
