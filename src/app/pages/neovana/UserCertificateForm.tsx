import * as React from "react";
import { useForm } from "react-hook-form";
import { addUserCertificate } from "../../../services/userCertificateService";
import { getAllCertificates } from "../../../services/certificateService";
import type { UserCertificate } from "../../../types/UserCertificate";
import type { Certificate } from "../../../types/Certificate";

interface Props {
  userId: string;
  onSaved?: () => void;
}

export function UserCertificateForm({ userId, onSaved }: Props) {
  const { register, handleSubmit, reset, formState: { isSubmitting } } = useForm<UserCertificate>();
  const [catalog, setCatalog] = React.useState<Certificate[]>([]);
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);

  React.useEffect(() => {
    let mounted = true;
    (async () => {
      try {
        const data = await getAllCertificates();
        if (mounted) setCatalog(data || []);
      } catch (e: any) {
        if (mounted) setError(e?.message || "Kh√¥ng t·∫£i ƒë∆∞·ª£c danh m·ª•c ch·ª©ng ch·ªâ.");
      } finally {
        if (mounted) setLoading(false);
      }
    })();
    return () => { mounted = false; };
  }, []);

  const onSubmit = async (data: UserCertificate) => {
    await addUserCertificate({ ...data, userId });
    reset();
    onSaved?.();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="bg-blue-100 p-6 rounded-xl space-y-4">
      <div>
        <label className="block text-sm font-medium mb-1">Ch·ª©ng ch·ªâ</label>
        <select
          {...register("certificateId", { required: "Vui l√≤ng ch·ªçn ch·ª©ng ch·ªâ" })}
          className="w-full p-2 rounded border"
          disabled={loading || isSubmitting}
        >
          <option value="">{loading ? "ƒêang t·∫£i..." : "Ch·ªçn ch·ª©ng ch·ªâ"}</option>
          {!loading && catalog.map((c) => (
            <option key={c.id} value={c.id}>{c.name}</option>
          ))}
        </select>
        {error && <p className="text-red-600 text-sm mt-1">{error}</p>}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <div>
          <label className="block text-sm font-medium mb-1">Ng√†y c·∫•p</label>
          <input
            type="date"
            {...register("date", { required: "Vui l√≤ng ch·ªçn ng√†y c·∫•p" })}
            className="w-full p-2 rounded border"
            disabled={isSubmitting}
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">N∆°i c·∫•p</label>
          <input
            type="text"
            {...register("issuer", { required: "Vui l√≤ng nh·∫≠p n∆°i c·∫•p" })}
            placeholder="British Council, IDP..."
            className="w-full p-2 rounded border"
            disabled={isSubmitting}
          />
        </div>
        <div>
          <label className="block text-sm font-medium mb-1">K·∫øt qu·∫£</label>
          <input
            type="text"
            {...register("result", { required: "Vui l√≤ng nh·∫≠p k·∫øt qu·∫£" })}
            placeholder="V√≠ d·ª•: 6.5 / Merit / Pass"
            className="w-full p-2 rounded border"
            disabled={isSubmitting}
          />
        </div>
      </div>

      <div>
        <label className="block text-sm font-medium mb-1">Di·ªÖn gi·∫£i</label>
        <textarea
          {...register("description")}
          placeholder="Ghi ch√∫ b·ªï sung (n·∫øu c√≥)"
          className="w-full p-2 rounded border"
          rows={3}
          disabled={isSubmitting}
        />
      </div>

      <button type="submit" disabled={isSubmitting || loading} className="px-4 py-2 rounded bg-blue-600 text-white">
        {isSubmitting ? "ƒêang l∆∞u..." : "üíæ L∆∞u ch·ª©ng ch·ªâ"}
      </button>
    </form>
  );
}
