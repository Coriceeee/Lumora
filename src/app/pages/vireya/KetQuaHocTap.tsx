import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import { addLearningResult } from "../../../services/learningResultService";
import { getAllSubjects } from "../../../services/subjectService";
import { getAllScoreTypes } from "../../../services/scoreTypeService";
import { Subject } from "../../../types/Subject";
import { ScoreType } from "../../../types/ScoreType";

interface FormData {
  classLevel: 10 | 11 | 12;
  subjectId: string;
  scoreTypeId: string;
  scores: (number | undefined)[];
  date: string;
  semester: 1 | 2;
  note?: string;
}

export default function KetQuaHocTapForm() {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [scoreTypes, setScoreTypes] = useState<ScoreType[]>([]);
  const [loading, setLoading] = useState(false);

  // T·∫°m th·ªùi hardcode userId, sau c√≥ th·ªÉ thay b·∫±ng user auth th·∫≠t
  const userFakeId = "user_fake_id_123456";
  const maxScoreCount = 5;

  const {
    register,
    handleSubmit,
    reset,
    watch,
    formState: { errors },
  } = useForm<FormData>({
    defaultValues: {
      classLevel: 10,
      semester: 1,
      subjectId: "",
      scoreTypeId: "",
      scores: [],
      date: "",
      note: "",
    },
  });

  useEffect(() => {
    getAllSubjects()
      .then(setSubjects)
      .catch(() => toast.error("Kh√¥ng th·ªÉ t·∫£i m√¥n h·ªçc."));
    getAllScoreTypes()
      .then(setScoreTypes)
      .catch(() => toast.error("Kh√¥ng th·ªÉ t·∫£i lo·∫°i ƒëi·ªÉm."));
  }, []);

  const selectedScoreTypeId = watch("scoreTypeId");
  const selectedScoreType = scoreTypes.find((st) => st.id === selectedScoreTypeId);

  // X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng input ƒëi·ªÉm hi·ªÉn th·ªã theo h·ªá s·ªë weight c·ªßa lo·∫°i ƒëi·ªÉm
  let inputCount = 1;
  if (selectedScoreType?.weight === 1) {
    inputCount = maxScoreCount;
  }

  // H√†m validate ƒëi·ªÉm - cho ph√©p tr·ªëng ho·∫∑c gi√° tr·ªã t·ª´ 0 ƒë·∫øn 10
  const validateScore = (v: number | undefined) => {
    if (v === undefined || v === null || isNaN(v)) return true;
    if (v >= 0 && v <= 10) return true;
    return "ƒêi·ªÉm ph·∫£i t·ª´ 0 ƒë·∫øn 10";
  };

  const onSubmit = async (data: FormData) => {
    setLoading(true);
    try {
      const userId = userFakeId;
      const validScores = (data.scores ?? [])
        .slice(0, inputCount)
        .filter(
          (score): score is number =>
            typeof score === "number" && !isNaN(score) && score >= 0 && score <= 10
        );

      if (validScores.length === 0) {
        toast.info("B·∫°n ch∆∞a nh·∫≠p ƒëi·ªÉm n√†o h·ª£p l·ªá.");
        setLoading(false);
        return;
      }

      for (const score of validScores) {
        await addLearningResult({
          userId,
          classLevel: data.classLevel,
          semester: data.semester,
          subjectId: data.subjectId,
          subjectName: subjects.find((s) => s.id === data.subjectId)?.name || "Kh√¥ng r√µ m√¥n",
          scoreTypeId: data.scoreTypeId,
          score,
          date: data.date,
          note: data.note,
          termLabel: "", // B·∫°n c√≥ th·ªÉ x·ª≠ l√Ω termLabel t√πy theo logic c·ªßa d·ª± √°n
        });
      }

      toast.success(`üéâ ƒê√£ l∆∞u ${validScores.length} ƒëi·ªÉm th√†nh c√¥ng!`);
      reset();
    } catch (error) {
      toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u.");
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container py-5">
      <ToastContainer position="top-right" autoClose={3000} />
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2
          className="fw-extrabold d-flex align-items-center"
          style={{ fontSize: "2.6rem", userSelect: "none" }}
        >
          <i
            className="bi bi-bar-chart-line-fill me-3"
            style={{ color: "#6366f1", fontSize: "2.6rem" }}
          />
          <span
            style={{
              background: "linear-gradient(90deg, #6366f1 0%, #ec4899 100%)",
              WebkitBackgroundClip: "text",
              WebkitTextFillColor: "transparent",
              fontWeight: "900",
            }}
          >
            Nh·∫≠p K·∫øt Qu·∫£ H·ªçc T·∫≠p
          </span>
        </h2>
      </div>

      <div
        className="card shadow-lg border-0 p-4 mb-5"
        style={{ maxWidth: 700, backgroundColor: "#f4f5ff", borderRadius: 18 }}
      >
        <form onSubmit={handleSubmit(onSubmit)} noValidate className="space-y-4">
          {/* H·ªçc k·ª≥ */}
          <div>
            <label className="form-label fw-semibold">H·ªçc k·ª≥</label>
            <select
              {...register("semester", {
                required: "Vui l√≤ng ch·ªçn h·ªçc k·ª≥.",
                valueAsNumber: true,
                validate: (v) => v === 1 || v === 2 || "H·ªçc k·ª≥ kh√¥ng h·ª£p l·ªá.",
              })}
              className="form-select form-select-lg"
            >
              <option value="">-- Ch·ªçn h·ªçc k·ª≥ --</option>
              <option value={1}>H·ªçc k·ª≥ 1</option>
              <option value={2}>H·ªçc k·ª≥ 2</option>
            </select>
            {errors.semester && (
              <small className="text-danger fst-italic">{errors.semester.message}</small>
            )}
          </div>

          {/* L·ªõp h·ªçc */}
          <div>
            <label className="form-label fw-semibold">L·ªõp h·ªçc</label>
            <select
              {...register("classLevel", {
                required: "Vui l√≤ng ch·ªçn l·ªõp h·ªçc.",
                valueAsNumber: true,
                validate: (v) => [10, 11, 12].includes(v) || "L·ªõp h·ªçc kh√¥ng h·ª£p l·ªá.",
              })}
              className="form-select form-select-lg"
            >
              <option value="">-- Ch·ªçn l·ªõp h·ªçc --</option>
              {[10, 11, 12].map((level) => (
                <option key={level} value={level}>
                  L·ªõp {level}
                </option>
              ))}
            </select>
            {errors.classLevel && (
              <small className="text-danger fst-italic">{errors.classLevel.message}</small>
            )}
          </div>

          {/* M√¥n h·ªçc */}
          <div>
            <label className="form-label fw-semibold">M√¥n h·ªçc</label>
            <select
              {...register("subjectId", { required: "Vui l√≤ng ch·ªçn m√¥n h·ªçc." })}
              className="form-select form-select-lg"
            >
              <option value="">-- Ch·ªçn m√¥n h·ªçc --</option>
              {subjects.map((subj) => (
                <option key={subj.id} value={subj.id}>
                  {subj.name}
                </option>
              ))}
            </select>
            {errors.subjectId && (
              <small className="text-danger fst-italic">{errors.subjectId.message}</small>
            )}
          </div>

          {/* Lo·∫°i ƒëi·ªÉm */}
          <div>
            <label className="form-label fw-semibold">Lo·∫°i ƒëi·ªÉm</label>
            <select
              {...register("scoreTypeId", { required: "Vui l√≤ng ch·ªçn lo·∫°i ƒëi·ªÉm." })}
              className="form-select form-select-lg"
            >
              <option value="">-- Ch·ªçn lo·∫°i ƒëi·ªÉm --</option>
              {scoreTypes.map((type) => (
                <option key={type.id} value={type.id}>
                  {type.name}
                </option>
              ))}
            </select>
            {errors.scoreTypeId && (
              <small className="text-danger fst-italic">{errors.scoreTypeId.message}</small>
            )}
          </div>

          {/* Nh·∫≠p ƒëi·ªÉm */}
          <div>
            <label className="form-label fw-semibold">
              Nh·∫≠p ƒëi·ªÉm (t·ªëi ƒëa {inputCount} ƒëi·ªÉm, kh√¥ng b·∫Øt bu·ªôc)
            </label>
            {Array.from({ length: inputCount }).map((_, idx) => (
              <div key={idx} className="mb-2">
                <input
                  type="number"
                  step={0.1}
                  min={0}
                  max={10}
                  placeholder={`ƒêi·ªÉm ${idx + 1}`}
                  {...register(`scores.${idx}` as const, {
                    valueAsNumber: true,
                    validate: validateScore,
                  })}
                  className="form-control"
                />
                {errors.scores?.[idx]?.message && (
                  <small className="text-danger fst-italic">{errors.scores[idx]?.message}</small>
                )}
              </div>
            ))}
          </div>

          {/* Ng√†y ki·ªÉm tra */}
          <div>
            <label className="form-label fw-semibold">Ng√†y ki·ªÉm tra</label>
            <input
              type="date"
              {...register("date", { required: "Vui l√≤ng ch·ªçn ng√†y ki·ªÉm tra." })}
              className="form-control form-control-lg"
            />
            {errors.date && (
              <small className="text-danger fst-italic">{errors.date.message}</small>
            )}
          </div>

          {/* Ghi ch√∫ */}
          <div>
            <label className="form-label fw-semibold">Ghi ch√∫</label>
            <textarea
              rows={3}
              {...register("note")}
              className="form-control"
              placeholder="Ghi ch√∫ th√™m n·∫øu c√≥..."
            />
          </div>

          {/* N√∫t thao t√°c */}
          <div className="d-flex justify-content-between pt-2">
            <button
              type="button"
              className="btn btn-outline-secondary"
              onClick={() => reset()}
              disabled={loading}
            >
              ƒê·∫∑t l·∫°i
            </button>
            <button
              type="submit"
              disabled={loading}
              className="btn btn-lg"
              style={{
                background: "linear-gradient(45deg, #6366f1 0%, #ec4899 100%)",
                color: "white",
                fontWeight: 600,
                borderRadius: 12,
              }}
            >
              {loading ? "ƒêang l∆∞u..." : "üíæ L∆∞u k·∫øt qu·∫£"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
