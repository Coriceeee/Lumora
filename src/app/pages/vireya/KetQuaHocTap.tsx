import React, { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import { addLearningResult } from "../../../services/learningResultService";
import { getAllSubjects } from "../../../services/subjectService";
import { getAllScoreTypes } from "../../../services/scoreTypeService";
import { Subject } from "../../../types/Subject";
import { ScoreType } from "../../../types/ScoreType";

interface FormData {
  classLevel: number;
  subjectId: string;
  scoreTypeId: string;
  score: number;
  date: string;
  semester: 1 | 2;
  note?: string;
}

interface KetQuaHocTapFormProps {
  currentUserId: string;
}

export default function KetQuaHocTapForm({ currentUserId }: KetQuaHocTapFormProps) {
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [scoreTypes, setScoreTypes] = useState<ScoreType[]>([]);
  const [loading, setLoading] = useState(false);
  const [showForm, setShowForm] = useState(true); // C√≥ th·ªÉ toggle n·∫øu mu·ªën gi·ªëng `DanhMucKhaoSat`

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<FormData>({
    defaultValues: {
      classLevel: 10,
      semester: 1,
      subjectId: "",
      scoreTypeId: "",
      score: undefined,
      date: "",
      note: "",
    },
  });

  useEffect(() => {
    getAllSubjects().then(setSubjects).catch(() => toast.error("Kh√¥ng th·ªÉ t·∫£i m√¥n h·ªçc."));
    getAllScoreTypes().then(setScoreTypes).catch(() => toast.error("Kh√¥ng th·ªÉ t·∫£i lo·∫°i ƒëi·ªÉm."));
  }, []);

  const onSubmit = async (data: FormData) => {
    setLoading(true);
    try {
      await addLearningResult({ userId: "id", ...data });
      toast.success("üéâ ƒê√£ l∆∞u k·∫øt qu·∫£ h·ªçc t·∫≠p!");
      reset();
    } catch (error) {
      debugger;
      toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container py-5">
      <ToastContainer position="top-right" autoClose={3000} />

      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2
          className="fw-extrabold d-flex align-items-center"
          style={{ fontSize: "2.6rem", userSelect: "none" }}
        >
          <i className="bi bi-bar-chart-line-fill me-3" style={{ color: "#6366f1", fontSize: "2.6rem" }} />
          <span
            style={{
              background: "linear-gradient(90deg, #6366f1 0%, #ec4899 100%)",
              WebkitBackgroundClip: "text",
              WebkitTextFillColor: "transparent",
              fontWeight: "900",
            }}
          >
            Nh·∫≠p K·∫øt Qu·∫£ H·ªçc T·∫≠p
          </span>
        </h2>
      </div>

      {showForm && (
        <div
          className="card shadow-lg border-0 p-4 mb-5"
          style={{
            maxWidth: 700,
            backgroundColor: "#f4f5ff",
            borderRadius: 18,
          }}
        >
          <form onSubmit={handleSubmit(onSubmit)} noValidate className="space-y-4">
            {/* H·ªçc k·ª≥ */}
            <div>
              <label className="form-label fw-semibold">H·ªçc k·ª≥</label>
              <select
                {...register("semester", { required: "Vui l√≤ng ch·ªçn h·ªçc k·ª≥." })}
                className="form-select form-select-lg"
              >
                <option value="">-- Ch·ªçn h·ªçc k·ª≥ --</option>
                <option value="1">H·ªçc k·ª≥ 1</option>
                <option value="2">H·ªçc k·ª≥ 2</option>
              </select>
              {errors.semester && (
                <small className="text-danger fst-italic">{errors.semester.message}</small>
              )}
            </div>
            {/* L·ªõp h·ªçc */}
            <div>
              <label className="form-label fw-semibold">L·ªõp h·ªçc</label>
              <select
                {...register("classLevel", { required: true, valueAsNumber: true })}
                className="form-select form-select-lg"
              >
                {[10, 11, 12].map((level) => (
                  <option key={level} value={level}>
                    L·ªõp {level}
                  </option>
                ))}
              </select>
              {errors.classLevel && (
                <small className="text-danger fst-italic">Vui l√≤ng ch·ªçn l·ªõp h·ªçc.</small>
              )}
            </div>

            {/* M√¥n h·ªçc */}
            <div>
              <label className="form-label fw-semibold">M√¥n h·ªçc</label>
              <select
                {...register("subjectId", { required: "Vui l√≤ng ch·ªçn m√¥n h·ªçc." })}
                className="form-select form-select-lg"
              >
                <option value="">-- Ch·ªçn m√¥n h·ªçc --</option>
                {subjects.map((subj) => (
                  <option key={subj.id} value={subj.id}>
                    {subj.name}
                  </option>
                ))}
              </select>
              {errors.subjectId && (
                <small className="text-danger fst-italic">{errors.subjectId.message}</small>
              )}
            </div>

            {/* Lo·∫°i ƒëi·ªÉm */}
            <div>
              <label className="form-label fw-semibold">Lo·∫°i ƒëi·ªÉm</label>
              <select
                {...register("scoreTypeId", { required: "Vui l√≤ng ch·ªçn lo·∫°i ƒëi·ªÉm." })}
                className="form-select form-select-lg"
              >
                <option value="">-- Ch·ªçn lo·∫°i ƒëi·ªÉm --</option>
                {scoreTypes.map((type) => (
                  <option key={type.id} value={type.id}>
                    {type.name}
                  </option>
                ))}
              </select>
              {errors.scoreTypeId && (
                <small className="text-danger fst-italic">{errors.scoreTypeId.message}</small>
              )}
            </div>

            {/* ƒêi·ªÉm s·ªë */}
            <div>
              <label className="form-label fw-semibold">ƒêi·ªÉm s·ªë</label>
              <input
                type="number"
                min={0}
                max={10}
                step={0.1}
                {...register("score", {
                  required: "Vui l√≤ng nh·∫≠p ƒëi·ªÉm.",
                  valueAsNumber: true,
                  min: { value: 0, message: "Kh√¥ng nh·ªè h∆°n 0." },
                  max: { value: 10, message: "Kh√¥ng l·ªõn h∆°n 10." },
                })}
                className="form-control form-control-lg"
              />
              {errors.score && (
                <small className="text-danger fst-italic">{errors.score.message}</small>
              )}
            </div>

            {/* Ng√†y ki·ªÉm tra */}
            <div>
              <label className="form-label fw-semibold">Ng√†y ki·ªÉm tra</label>
              <input
                type="date"
                {...register("date", { required: "Vui l√≤ng ch·ªçn ng√†y ki·ªÉm tra." })}
                className="form-control form-control-lg"
              />
              {errors.date && (
                <small className="text-danger fst-italic">{errors.date.message}</small>
              )}
            </div>

            {/* Ghi ch√∫ */}
            <div>
              <label className="form-label fw-semibold">Ghi ch√∫</label>
              <textarea
                rows={3}
                {...register("note")}
                className="form-control"
                placeholder="Ghi ch√∫ th√™m n·∫øu c√≥..."
              />
            </div>

            {/* N√∫t thao t√°c */}
            <div className="d-flex justify-content-between pt-2">
              <button
                type="button"
                className="btn btn-outline-secondary"
                onClick={() => reset()}
              >
                ƒê·∫∑t l·∫°i
              </button>
              <button
                type="submit"
                disabled={loading}
                className="btn btn-lg"
                style={{
                  background: "linear-gradient(45deg, #6366f1 0%, #ec4899 100%)",
                  color: "white",
                  fontWeight: 600,
                  borderRadius: 12,
                }}
              >
                {loading ? "ƒêang l∆∞u..." : "üíæ L∆∞u k·∫øt qu·∫£"}
              </button>
            </div>
          </form>
        </div>
      )}
    </div>
  );
}
