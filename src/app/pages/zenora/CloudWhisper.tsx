import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { FaSpinner, FaHeart } from "react-icons/fa"; // ƒê·∫£m b·∫£o b·∫°n c√†i react-icons
import { callGeminiServer } from "../../../services/gemini";
import "./CloudWhisper.css";

// Ki·ªÉu d·ªØ li·ªáu
type CloudItem = {
  id: string;
  title: string;
  content: string;
  likes: number;
};

const classNames = ["cloud1", "cloud2", "cloud3"];  // ƒê·∫£m b·∫£o c√°c class m√¢y t∆∞∆°ng ·ª©ng ƒë√£ ƒë∆∞·ª£c t·∫°o trong CSS

// Component ch√≠nh
export default function CloudWhisper() {
  const [loading, setLoading] = useState(true);
  const [clouds, setClouds] = useState<CloudItem[]>([]);
  const [liked, setLiked] = useState<Set<string>>(new Set());
  const [error, setError] = useState("");
  const [selectedItem, setSelectedItem] = useState<CloudItem | null>(null);  // Th√™m tr·∫°ng th√°i cho item ƒë∆∞·ª£c ch·ªçn
  const [modalOpen, setModalOpen] = useState(false);  // Tr·∫°ng th√°i Modal

  const prompt = `
     B·∫°n l√† tr·ª£ l√Ω t·∫°o th√¥ng ƒëi·ªáp t√≠ch c·ª±c d√†nh cho h·ªçc sinh v√† sinh vi√™n Vi·ªát Nam. 
    Nhi·ªám v·ª• c·ªßa b·∫°n l√† sinh ra 30 th√¥ng ƒëi·ªáp ng·∫Øn g·ªçn, vui t∆∞∆°i, kh√≠ch l·ªá tinh th·∫ßn h·ªçc t·∫≠p, v∆∞·ª£t qua √°p l·ª±c v√† y√™u b·∫£n th√¢n.
    
    Y√™u c·∫ßu:
    - M·ªói th√¥ng ƒëi·ªáp g·ªìm hai tr∆∞·ªùng: "title" v√† "content".
    - "title" l√† m·ªôt c·ª•m 2‚Äì5 t·ª´ k√®m emoji ·ªü ƒë·∫ßu (v√≠ d·ª•: "üåà V·ªØng b∆∞·ªõc l√™n nh√©").
    - "content" l√† 1‚Äì2 c√¢u kh√≠ch l·ªá b·∫±ng ti·∫øng Vi·ªát, t·ª± nhi√™n, g·∫ßn g≈©i, c√≥ th·ªÉ th√™m emoji.
    - Phong c√°ch vi·∫øt t√≠ch c·ª±c, truy·ªÅn nƒÉng l∆∞·ª£ng, kh√¥ng s√°o r·ªóng, nh·∫π nh√†ng t√≠ch c·ª±c nh∆∞ 1 ng∆∞·ªùi b·∫°n th·∫≠t s·ª±, k√®m th√™m 1 ch√∫t ƒë√°ng y√™u.
    - Kh√¥ng l·∫∑p l·∫°i √Ω t∆∞·ªüng.
    - Ch·ªâ TR·∫¢ V·ªÄ duy nh·∫•t K·∫æT QU·∫¢ d·∫°ng JSON thu·∫ßn t√∫y, KH√îNG markdown, KH√îNG gi·∫£i th√≠ch, KH√îNG comment.
    
    C·∫•u tr√∫c JSON m·∫´u:
    {
      "messages": [
        {
          "title": "üçÄ Tin v√†o b·∫£n th√¢n",
          "content": "B·∫°n nh·ªè ∆°i, b·∫°n l√†m t·ªët l·∫Øm! üëâ ƒê·ª´ng qu√™n v·ªó nh·∫π v√†o vai v√† n√≥i 'm√¨nh tuy·ªát l·∫Øm ƒë√≥ nh√©!' üéâ"
        },
        {
          "title": "üå§Ô∏è M·ªói ng√†y m·ªôt b∆∞·ªõc",
          "content": "D√π ch·∫≠m, b·∫°n v·∫´n ƒëang ti·∫øn l√™n ph√≠a tr∆∞·ªõc. C·ª© ki√™n tr√¨ nh√© üí™"
        }
      ]
    }
  `;

  async function fetchClouds() {
    setLoading(true);
    setError("");

    try {
      const data = await callGeminiServer(prompt);

      const arr = data.messages || [];

      const items = arr.slice(0, 30).map((it: any, i: number) => ({
        id: Math.random().toString(36),
        title: it.title || `üå§Ô∏è ƒê√°m m√¢y #${i + 1}`,
        content:
          it.content ||
          "H√≠t th·ªü s√¢u ‚Äî b·∫°n tuy·ªát v·ªùi h∆°n b·∫°n nghƒ© ƒë√≥! üçÄ",
        likes: 0,
      }));

      setClouds(items);
    } catch (err: any) {
      console.error("Gemini l·ªói:", err);
      setError(err.message || "Kh√¥ng th·ªÉ t·∫°o th√¥ng ƒëi·ªáp");
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    fetchClouds();
  }, []);

  const handleLike = (id: string) => {
    setLiked((prev) => new Set([...prev, id]));
    setClouds((prev) =>
      prev.map((c) =>
        c.id === id ? { ...c, likes: c.likes + 1 } : c
      )
    );
  };

  const handleCloudClick = (index: number) => {
    const cloud = clouds[index];
    setSelectedItem(cloud);  // Set item ƒë∆∞·ª£c ch·ªçn
    setModalOpen(true);  // M·ªü Modal
  };

  const closeModal = () => {
    setModalOpen(false);  // ƒê√≥ng Modal
    setSelectedItem(null);  // X√≥a item ƒë√£ ch·ªçn
  };

  return (
    <div
      className="sky"
    >
      {loading ? (
        <div className="flex-1 flex justify-center items-center">
          
        </div>
      ) : (
        clouds.map((cloud, index) => {
          const screenHeight = window.innerHeight;
          const positionTop = (Math.random() * 0.5) * screenHeight;
          const size = Math.random() * 400 + 100;
          const className = classNames[Math.floor(Math.random() * classNames.length)];
          const startX = Math.random() * window.innerWidth - window.innerWidth / 2;
          const randomOffset = Math.random() * 200;

          return (
            <motion.div
              key={cloud.id}
              className={className}
              style={{
                width: `${size}px`,
                height: `${size * 0.6}px`,
                top: `${positionTop}px`,
              }}
              initial={{ x: startX }}
              animate={{ x: "-130vw", y: [-positionTop, randomOffset, -randomOffset, 0] }}
              transition={{
                duration: 80 + Math.random() * 40,
                repeat: Infinity,
                ease: "linear",
              }}
              onClick={() => handleCloudClick(index)} // G·ªçi h√†m khi click v√†o ƒë√°m m√¢y
            >
              <div className="cloud-title">{cloud.title}</div>
            </motion.div>
          );
        })
      )}

      {modalOpen && selectedItem && (
        <div className="result">
          üëâ {selectedItem.content}
          <button
            className="like-button ml-4 text-red-500"
            disabled={liked.has(selectedItem.id)}
          >
          
            {selectedItem.likes || 0}
          </button>
          <button
            className="close-modal"
            onClick={closeModal}
          >
            ‚úñ
          </button>
        </div>
      )}
    </div>
  );
}
